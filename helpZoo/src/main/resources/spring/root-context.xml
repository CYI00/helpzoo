<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components 
						(다른 웹 구성 요소에 표시되는 공유 자원을 정의하는 곳)
		 서버 구동 -> web.xml을 먼저 읽음 -> web.xml 내용 중 가장 먼저 읽어지는 파일
		 
		 DB 연결 정보(JDBC, Mybatis, Connectio Pool),
		 트랜잭션 처리 정보, 파일 업로드, AOP 관련 설정 등을 작성함.
	-->
	
	<!-- JDBCTemplate	-Connection 객체 사용 
		 DBCP -> DataSource 객체 사용(Connection 객체를 한번 더 감싼 객체)
	-->	
	
	<!-- 
		BasicDataSource dataSource = new BasicDataSource();
	 -->
																	<!-- destroy-method="close" -->
							<!-- conn.close()와 같은 느낌, 주어진 SqlSession 작업이 종료되면 close 하라는 의미 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@115.90.212.22:1521:xe"/>
		<property name="username" value="helpzoo"/>
		<property name="password" value="helpzoo"/>
		
		<!-- 기본적으로 자동 커밋 지정 가능 -->
		<!-- defaultAutoCommit : 커넥션 풀을 이용해서 DB와 연결할 경우
			 기본적으로 auto commit 상태 false로 지정할 경우 Spring framework 또는 개발자에 의해서
			 트랜잭션을 제어하겠다라는 의미
		  -->
		<property name="defaultAutoCommit" value="false"/>
		
		<!-- 커넥션 풀 관련 설정 -->
		<property name="initialSize" value="10"/> <!-- 초기 커넥션 수, 기본 0 -->
      <property name="maxTotal" value="500"/> <!-- 최대 커넥션 수, 기본 8 -->
      <property name="maxIdle" value="100"/> <!-- 유휴 상태로 존재할 수 있는 커넥션 최대 수, 기본 8-->
      <property name="minIdle" value="10"/> <!-- 유휴 상태로 존재할 수 있는 커넥션 최소 수, 기본 0 -->
      <property name="maxWaitMillis" value="60000"/> <!-- 예외 발생 전 커넥션이 반환 될 떄 까지 대기하는 최대 시간(ms), 기본 -1(무기한) -->
	</bean>
	
	   <!-- 
      SqlSession : sql구문을 DB에 전달, 실행하는 객체
      SqlSessionFactory : SqlSession을 만드는 객체
      sqlSessionFactoryBean : mybatis 설정 파일, Connection Pool 정보를 이용하여 SqlSessionFactory를 만드는 객체
      sqlSessionTemplate : SqlSession 객체에 트랜잭션 처리 역할이 가능하도록 하는 객체
    -->
    
    <!-- Mybatis SqlSession Bean 등록 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- setter 느낌 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- SqlSessionTemplate : 기본 SQL 실행 기능을 가진 SqlSession에 트랜잭션 처리 기능 부여-->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean"/>
	</bean>
	
	<!-- 트랜잭션 처리를 위한 트랜잭션 매니저 추가 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- ref에 참조는 위에서 생성한 dataSource -->
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- 트랜잭션 매니저 추가 후 xml namespace에 tx 추가 -->
	<!-- 하단에 Namespace 클릭, tx에 체크 -->
	<tx:annotation-driven/>
	<!-- 
		@Transactional 어노테이션을 인식하여 트랜잭션 처리를 진행해라
		
		등록된 bean 중 @Transactional 어노테이션이 붙은 메소드를 찾아
		트랜잭션 처리를 할 수 있도록 트랜잭션 어드바이스를 적용해라.
	 -->
	<!-- Gmail -->
	  <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
	    <property name="host" value="smtp.gmail.com" />
	    <property name="port" value="587" />
	    <property name="username" value="helpzooFinal@gmail.com" />
	    <property name="password" value="akxruwh0928" />
	    <property name="javaMailProperties">
	    <props>
	      <prop key="mail.smtp.auth">true</prop>
	      <prop key="mail.smtp.starttls.enable">true</prop>
	    </props>
	    </property>
	  </bean>
	
	
		<!-- 파일  업로드 관련 Bean 등록-->
	<!-- MutipartResolver -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		 <property name="maxUploadSize" value="100000000"/>
		 <property name="maxInMemorySize" value="100000000"/>
	</bean>
		<!-- 
		maxUploadSize 
			: 한 요청당 업로드가 허용되는 최대 용량을 바이트 단위로 설정.
			-1 은 제한이 없다는 뜻으로 이 프로퍼티를 지정하지 않을때 기본값.
		
		maxInMemorySize 
			: 디스크에 저장하지 않고 메모리에 유지하도록 
			허용하는 바이트 단위의 최대 용량을 설정.
			
	 		사이즈가 이보다 클 경우 이 사이즈 이상의 데이터는 파일에 저장됩니다. 
			 기본값은 10240 바이트.
	 -->	
</beans>
